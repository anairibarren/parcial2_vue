{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport MovieList from '../components/MovieList.vue';\nimport SearchBar from '../components/SearchBar.vue';\nimport Filter from '../components/Filter.vue';\nimport MovieDetail from '../views/MovieDetail.vue';\nexport default {\n  __name: 'HomeView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const movies = ref([]);\n    const selectedMovie = ref(null);\n    const apiKey = process.env.VUE_APP_TMDB_API_KEY;\n    const fetchPopular = async () => {\n      const apiKey = process.env.VUE_APP_TMDB_API_KEY;\n      const res = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=es-ES`);\n      const data = await res.json();\n      movies.value = data.results;\n    };\n    const searchMovies = async query => {\n      const apiKey = process.env.VUE_APP_TMDB_API_KEY;\n      if (!query) {\n        fetchPopular();\n        return;\n      }\n      const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=es-ES&query=${query}`);\n      const data = await res.json();\n      movies.value = data.results;\n    };\n    const filterByGenre = async genreId => {\n      const apiKey = process.env.VUE_APP_TMDB_API_KEY;\n      let url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=es-ES`;\n      if (genreId) {\n        url += `&with_genres=${genreId}`;\n      }\n      const res = await fetch(url);\n      const data = await res.json();\n      movies.value = data.results;\n    };\n    const openDetail = movie => {\n      selectedMovie.value = movie;\n    };\n    const toastMessage = ref('');\n    const toastType = ref('success'); // 'success', 'warning' o 'error'\n\n    const showToast = (message, type = 'success') => {\n      toastMessage.value = message;\n      toastType.value = type;\n      setTimeout(() => {\n        toastMessage.value = '';\n      }, 3000);\n    };\n    const addToFavorites = movie => {\n      const stored = JSON.parse(localStorage.getItem('favorites')) || [];\n      if (!stored.find(m => m.id === movie.id)) {\n        stored.push(movie);\n        localStorage.setItem('favorites', JSON.stringify(stored));\n        showToast('✅ ¡Agregado con éxito!', 'success');\n      } else {\n        showToast('⚠️ Esta película ya fue agregada a favoritos', 'warning');\n      }\n    };\n    onMounted(fetchPopular);\n    const __returned__ = {\n      movies,\n      selectedMovie,\n      apiKey,\n      fetchPopular,\n      searchMovies,\n      filterByGenre,\n      openDetail,\n      toastMessage,\n      toastType,\n      showToast,\n      addToFavorites,\n      ref,\n      onMounted,\n      MovieList,\n      SearchBar,\n      Filter,\n      MovieDetail\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","MovieList","SearchBar","Filter","MovieDetail","movies","selectedMovie","apiKey","process","env","VUE_APP_TMDB_API_KEY","fetchPopular","res","fetch","data","json","value","results","searchMovies","query","filterByGenre","genreId","url","openDetail","movie","toastMessage","toastType","showToast","message","type","setTimeout","addToFavorites","stored","JSON","parse","localStorage","getItem","find","m","id","push","setItem","stringify"],"sources":["C:/Users/anade/OneDrive/Escritorio/vue-movie-app/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"search-filter-container\">\n      <SearchBar @search=\"searchMovies\" />\n      <Filter @filter=\"filterByGenre\" />\n    </div>\n\n    <MovieList v-if=\"movies.length\" :movies=\"movies\" @show-detail=\"openDetail\" \n      @add-favorite=\"addToFavorites\" />\n    <p v-else>No hay películas para mostrar.</p>\n    \n    <MovieDetail v-if=\"selectedMovie\" :movie=\"selectedMovie\" @close=\"selectedMovie = null\"/>\n\n    <p v-if=\"toastMessage\" :class=\"['toast', toastType]\">{{ toastMessage }}</p>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport MovieList from '../components/MovieList.vue'\nimport SearchBar from '../components/SearchBar.vue'\nimport Filter from '../components/Filter.vue'\nimport MovieDetail from '../views/MovieDetail.vue' \n\nconst movies = ref([])\nconst selectedMovie = ref(null)\n\nconst apiKey = process.env.VUE_APP_TMDB_API_KEY\n\nconst fetchPopular = async () => {\n  const apiKey = process.env.VUE_APP_TMDB_API_KEY\n  const res = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=es-ES`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst searchMovies = async (query) => {\n  const apiKey = process.env.VUE_APP_TMDB_API_KEY\n  if (!query) {\n    fetchPopular()\n    return\n  }\n  const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=es-ES&query=${query}`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst filterByGenre = async (genreId) => {\n  const apiKey = process.env.VUE_APP_TMDB_API_KEY\n  let url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=es-ES`\n\n  if (genreId) {\n    url += `&with_genres=${genreId}`\n  }\n\n  const res = await fetch(url)\n  const data = await res.json()\n  movies.value = data.results\n}\n\n\nconst openDetail = (movie) => {\n  selectedMovie.value = movie\n}\n\nconst toastMessage = ref('')\nconst toastType = ref('success') // 'success', 'warning' o 'error'\n\nconst showToast = (message, type = 'success') => {\n  toastMessage.value = message\n  toastType.value = type\n  setTimeout(() => {\n    toastMessage.value = ''\n  }, 3000)\n}\n\nconst addToFavorites = (movie) => {\n  const stored = JSON.parse(localStorage.getItem('favorites')) || []\n  if (!stored.find(m => m.id === movie.id)) {\n    stored.push(movie)\n    localStorage.setItem('favorites', JSON.stringify(stored))\n    showToast('✅ ¡Agregado con éxito!', 'success')\n  } else {\n    showToast('⚠️ Esta película ya fue agregada a favoritos', 'warning')\n  }\n}\n\nonMounted(fetchPopular)\n</script>\n"],"mappings":"AAkBA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAI;AACnC,OAAOC,SAAS,MAAM,6BAA4B;AAClD,OAAOC,SAAS,MAAM,6BAA4B;AAClD,OAAOC,MAAM,MAAM,0BAAyB;AAC5C,OAAOC,WAAW,MAAM,0BAA0B;;;;;;;IAElD,MAAMC,MAAM,GAAGN,GAAG,CAAC,EAAE;IACrB,MAAMO,aAAa,GAAGP,GAAG,CAAC,IAAI;IAE9B,MAAMQ,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAmB;IAE9C,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMJ,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAmB;MAC9C,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,sDAAsDN,MAAM,iBAAiB;MACrG,MAAMO,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC;MAC5BV,MAAM,CAACW,KAAK,GAAGF,IAAI,CAACG,OAAM;IAC5B;IAEA,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;MACpC,MAAMZ,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAmB;MAC9C,IAAI,CAACS,KAAK,EAAE;QACVR,YAAY,CAAC;QACb;MACF;MACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,qDAAqDN,MAAM,yBAAyBY,KAAK,EAAE;MACnH,MAAML,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC;MAC5BV,MAAM,CAACW,KAAK,GAAGF,IAAI,CAACG,OAAM;IAC5B;IAEA,MAAMG,aAAa,GAAG,MAAOC,OAAO,IAAK;MACvC,MAAMd,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAmB;MAC9C,IAAIY,GAAG,GAAG,uDAAuDf,MAAM,iBAAgB;MAEvF,IAAIc,OAAO,EAAE;QACXC,GAAG,IAAI,gBAAgBD,OAAO,EAAC;MACjC;MAEA,MAAMT,GAAG,GAAG,MAAMC,KAAK,CAACS,GAAG;MAC3B,MAAMR,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC;MAC5BV,MAAM,CAACW,KAAK,GAAGF,IAAI,CAACG,OAAM;IAC5B;IAGA,MAAMM,UAAU,GAAIC,KAAK,IAAK;MAC5BlB,aAAa,CAACU,KAAK,GAAGQ,KAAI;IAC5B;IAEA,MAAMC,YAAY,GAAG1B,GAAG,CAAC,EAAE;IAC3B,MAAM2B,SAAS,GAAG3B,GAAG,CAAC,SAAS,CAAC,EAAC;;IAEjC,MAAM4B,SAAS,GAAGA,CAACC,OAAO,EAAEC,IAAI,GAAG,SAAS,KAAK;MAC/CJ,YAAY,CAACT,KAAK,GAAGY,OAAM;MAC3BF,SAAS,CAACV,KAAK,GAAGa,IAAG;MACrBC,UAAU,CAAC,MAAM;QACfL,YAAY,CAACT,KAAK,GAAG,EAAC;MACxB,CAAC,EAAE,IAAI;IACT;IAEA,MAAMe,cAAc,GAAIP,KAAK,IAAK;MAChC,MAAMQ,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC;MACjE,IAAI,CAACJ,MAAM,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKf,KAAK,CAACe,EAAE,CAAC,EAAE;QACxCP,MAAM,CAACQ,IAAI,CAAChB,KAAK;QACjBW,YAAY,CAACM,OAAO,CAAC,WAAW,EAAER,IAAI,CAACS,SAAS,CAACV,MAAM,CAAC;QACxDL,SAAS,CAAC,wBAAwB,EAAE,SAAS;MAC/C,CAAC,MAAM;QACLA,SAAS,CAAC,8CAA8C,EAAE,SAAS;MACrE;IACF;IAEA3B,SAAS,CAACW,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}