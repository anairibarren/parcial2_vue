{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"search-filter-container\"\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache) {\n  const _component_SearchBar = _resolveComponent(\"SearchBar\");\n  const _component_Filter = _resolveComponent(\"Filter\");\n  const _component_MovieList = _resolveComponent(\"MovieList\");\n  const _component_MovieDetail = _resolveComponent(\"MovieDetail\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_SearchBar, {\n    onSearch: _ctx.searchMovies\n  }, null, 8 /* PROPS */, [\"onSearch\"]), _createVNode(_component_Filter, {\n    onFilter: _ctx.filterByGenre\n  }, null, 8 /* PROPS */, [\"onFilter\"])]), _ctx.movies.length ? (_openBlock(), _createBlock(_component_MovieList, {\n    key: 0,\n    movies: _ctx.movies,\n    onShowDetail: _ctx.openDetail,\n    onAddFavorite: _ctx.addToFavorites\n  }, null, 8 /* PROPS */, [\"movies\", \"onShowDetail\", \"onAddFavorite\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"No hay películas para mostrar.\")), _ctx.selectedMovie ? (_openBlock(), _createBlock(_component_MovieDetail, {\n    key: 2,\n    movie: _ctx.selectedMovie,\n    onClose: _cache[0] || (_cache[0] = $event => _ctx.selectedMovie = null)\n  }, null, 8 /* PROPS */, [\"movie\"])) : _createCommentVNode(\"v-if\", true), _ctx.toastMessage ? (_openBlock(), _createElementBlock(\"p\", {\n    key: 3,\n    class: _normalizeClass(['toast', _ctx.toastType])\n  }, _toDisplayString(_ctx.toastMessage), 3 /* TEXT, CLASS */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_hoisted_1","_createVNode","_component_SearchBar","onSearch","_ctx","searchMovies","_component_Filter","onFilter","filterByGenre","movies","length","_createBlock","_component_MovieList","onShowDetail","openDetail","onAddFavorite","addToFavorites","_hoisted_2","selectedMovie","_component_MovieDetail","movie","onClose","_cache","$event","toastMessage","_normalizeClass","toastType"],"sources":["C:\\Users\\anade\\OneDrive\\Escritorio\\vue-movie-app\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"search-filter-container\">\n      <SearchBar @search=\"searchMovies\" />\n      <Filter @filter=\"filterByGenre\" />\n    </div>\n\n    <MovieList v-if=\"movies.length\" :movies=\"movies\" @show-detail=\"openDetail\" \n      @add-favorite=\"addToFavorites\" />\n    <p v-else>No hay películas para mostrar.</p>\n    \n    <MovieDetail v-if=\"selectedMovie\" :movie=\"selectedMovie\" @close=\"selectedMovie = null\"/>\n\n    <p v-if=\"toastMessage\" :class=\"['toast', toastType]\">{{ toastMessage }}</p>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport MovieList from '../components/MovieList.vue'\nimport SearchBar from '../components/SearchBar.vue'\nimport Filter from '../components/Filter.vue'\nimport MovieDetail from '../views/MovieDetail.vue' \n\nconst movies = ref([])\nconst selectedMovie = ref(null)\n\nconst apiKey = process.env.VUE_APP_TMDB_API_KEY\n\nconst fetchPopular = async () => {\n  const apiKey = process.env.VUE_APP_TMDB_API_KEY\n  const res = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=es-ES`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst searchMovies = async (query) => {\n  const apiKey = process.env.VUE_APP_TMDB_API_KEY\n  if (!query) {\n    fetchPopular()\n    return\n  }\n  const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=es-ES&query=${query}`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst filterByGenre = async (genreId) => {\n  const apiKey = process.env.VUE_APP_TMDB_API_KEY\n  let url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=es-ES`\n\n  if (genreId) {\n    url += `&with_genres=${genreId}`\n  }\n\n  const res = await fetch(url)\n  const data = await res.json()\n  movies.value = data.results\n}\n\n\nconst openDetail = (movie) => {\n  selectedMovie.value = movie\n}\n\nimport { ref, onMounted } from 'vue'\n// ... tus imports y código anterior\n\nconst toastMessage = ref('')\nconst toastType = ref('success') // 'success', 'warning' o 'error'\n\nconst showToast = (message, type = 'success') => {\n  toastMessage.value = message\n  toastType.value = type\n  setTimeout(() => {\n    toastMessage.value = ''\n  }, 3000)\n}\n\nconst addToFavorites = (movie) => {\n  const stored = JSON.parse(localStorage.getItem('favorites')) || []\n  if (!stored.find(m => m.id === movie.id)) {\n    stored.push(movie)\n    localStorage.setItem('favorites', JSON.stringify(stored))\n    showToast('✅ ¡Agregado con éxito!', 'success')\n  } else {\n    showToast('⚠️ Esta película ya fue agregada a favoritos', 'warning')\n  }\n}\n\nonMounted(fetchPopular)\n</script>\n"],"mappings":";;EAESA,KAAK,EAAC;AAAyB;;;;;;;;;uBADtCC,mBAAA,CAaM,cAZJC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,YAAA,CAAoCC,oBAAA;IAAxBC,QAAM,EAAEC,IAAA,CAAAC;EAAY,uCAChCJ,YAAA,CAAkCK,iBAAA;IAAzBC,QAAM,EAAEH,IAAA,CAAAI;EAAa,sC,GAGfJ,IAAA,CAAAK,MAAM,CAACC,MAAM,I,cAA9BC,YAAA,CACmCC,oBAAA;;IADFH,MAAM,EAAEL,IAAA,CAAAK,MAAM;IAAGI,YAAW,EAAET,IAAA,CAAAU,UAAU;IACtEC,aAAY,EAAEX,IAAA,CAAAY;yFACjBlB,mBAAA,CAA4C,KAAAmB,UAAA,EAAlC,gCAA8B,IAErBb,IAAA,CAAAc,aAAa,I,cAAhCP,YAAA,CAAwFQ,sBAAA;;IAArDC,KAAK,EAAEhB,IAAA,CAAAc,aAAa;IAAGG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEnB,IAAA,CAAAc,aAAa;2EAErEd,IAAA,CAAAoB,YAAY,I,cAArB1B,mBAAA,CAA2E;;IAAnDD,KAAK,EAAA4B,eAAA,WAAYrB,IAAA,CAAAsB,SAAS;sBAAMtB,IAAA,CAAAoB,YAAY,2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}