{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 1\n};\nexport function render(_ctx, _cache) {\n  const _component_SearchBar = _resolveComponent(\"SearchBar\");\n  const _component_Filter = _resolveComponent(\"Filter\");\n  const _component_MovieList = _resolveComponent(\"MovieList\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_SearchBar, {\n    onSearch: _ctx.searchMovies\n  }, null, 8 /* PROPS */, [\"onSearch\"]), _createVNode(_component_Filter, {\n    onFilter: _ctx.filterByGenre\n  }, null, 8 /* PROPS */, [\"onFilter\"]), _ctx.movies.length ? (_openBlock(), _createBlock(_component_MovieList, {\n    key: 0,\n    movies: _ctx.movies\n  }, null, 8 /* PROPS */, [\"movies\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_1, \"No hay películas para mostrar.\"))]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_SearchBar","onSearch","_ctx","searchMovies","_component_Filter","onFilter","filterByGenre","movies","length","_createBlock","_component_MovieList","_hoisted_1"],"sources":["C:\\Users\\anade\\OneDrive\\Escritorio\\vue-movie-app\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <SearchBar @search=\"searchMovies\" />\n    <Filter @filter=\"filterByGenre\" />\n    <MovieList v-if=\"movies.length\" :movies=\"movies\" />\n    <p v-else>No hay películas para mostrar.</p>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport axios from 'axios'\nimport MovieList from '../components/MovieList.vue'\nimport SearchBar from '../components/SearchBar.vue'\nimport Filter from '../components/Filter.vue' \n\nconst movies = ref([]){\n  \n}\n\n\nconst fetchPopular = async () => {\n  const apiKey = import.meta.env.VITE_TMDB_API_KEY || process.env.VUE_APP_TMDB_API_KEY\n  const res = await axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=es-ES`)\n  movies.value = res.data.results\n}\n\nconst searchMovies = async (query) => {\n  try {\n    const apiKey = import.meta.env.VITE_TMDB_API_KEY || process.env.VUE_APP_TMDB_API_KEY\n    if (!query) {\n      fetchPopular()\n      return\n    }\n    const res = await axios.get(`https://api.themoviedb.org/3/search/movie`, {\n      params: {\n        api_key: apiKey,\n        language: 'es-ES',\n        query\n      }\n    })\n    movies.value = res.data.results\n  } catch (error) {\n    console.error('Error buscando películas:', error)\n  }\n}\n\nconst filterByGenre = async (genreId) => {\n  const apiKey = import.meta.env.VITE_TMDB_API_KEY || process.env.VUE_APP_TMDB_API_KEY\n  const res = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=es-ES&with_genres=${genreId}`)\n  movies.value = res.data.results\n}\n\nonMounted(fetchPopular)\n</script>"],"mappings":";;;;;;;;uBACEA,mBAAA,CAKM,cAJJC,YAAA,CAAoCC,oBAAA;IAAxBC,QAAM,EAAEC,IAAA,CAAAC;EAAY,uCAChCJ,YAAA,CAAkCK,iBAAA;IAAzBC,QAAM,EAAEH,IAAA,CAAAI;EAAa,uCACbJ,IAAA,CAAAK,MAAM,CAACC,MAAM,I,cAA9BC,YAAA,CAAmDC,oBAAA;;IAAlBH,MAAM,EAAEL,IAAA,CAAAK;wDACzCT,mBAAA,CAA4C,KAAAa,UAAA,EAAlC,gCAA8B,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}