{"ast":null,"code":"import { createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode($setup[\"SearchBar\"], {\n    onSearch: $setup.searchMovies\n  }), _createVNode($setup[\"Filter\"], {\n    onFilter: $setup.filterByGenre\n  }), $setup.movies.length ? (_openBlock(), _createBlock($setup[\"MovieList\"], {\n    key: 0,\n    movies: $setup.movies,\n    onShowDetail: $setup.openDetail,\n    onAddFavorite: $setup.addToFavorites\n  }, null, 8 /* PROPS */, [\"movies\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_1, \"No hay películas para mostrar.\")), $setup.selectedMovie ? (_openBlock(), _createBlock($setup[\"MovieDetail\"], {\n    key: 2,\n    movie: $setup.selectedMovie,\n    onClose: _cache[0] || (_cache[0] = $event => $setup.selectedMovie = null)\n  }, null, 8 /* PROPS */, [\"movie\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","$setup","onSearch","searchMovies","onFilter","filterByGenre","movies","length","_createBlock","onShowDetail","openDetail","onAddFavorite","addToFavorites","_hoisted_1","selectedMovie","movie","onClose","_cache","$event"],"sources":["C:\\Users\\anade\\OneDrive\\Escritorio\\vue-movie-app\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <SearchBar @search=\"searchMovies\" />\n    <Filter @filter=\"filterByGenre\" />\n    <MovieList \n      v-if=\"movies.length\" \n      :movies=\"movies\" \n      @show-detail=\"openDetail\" \n      @add-favorite=\"addToFavorites\" \n    />\n    <p v-else>No hay películas para mostrar.</p>\n\n    <MovieDetail \n      v-if=\"selectedMovie\" \n      :movie=\"selectedMovie\" \n      @close=\"selectedMovie = null\" \n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport MovieList from '../components/MovieList.vue'\nimport MovieDetail from '../view/MovieDetail.vue'\nimport SearchBar from '../components/SearchBar.vue'\nimport Filter from '../components/Filter.vue'\n\nconst movies = ref([])\nconst selectedMovie = ref(null)\n\nconst apiKey = import.meta.env.VUE_APP_TMDB_API_KEY || process.env.VITE_TMDB_API_KEY\n\nconst fetchPopular = async () => {\n  const res = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=es-ES`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst searchMovies = async (query) => {\n  if (!query) return fetchPopular()\n  const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=es-ES&query=${encodeURIComponent(query)}`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst filterByGenre = async (genreId) => {\n  const res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=es-ES&with_genres=${genreId}`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst openDetail = (movie) => {\n  selectedMovie.value = movie\n}\n\nconst addToFavorites = (movie) => {\n  const stored = JSON.parse(localStorage.getItem('favorites')) || []\n  if (!stored.find(m => m.id === movie.id)) {\n    stored.push(movie)\n    localStorage.setItem('favorites', JSON.stringify(stored))\n    alert('Película agregada a favoritos!')\n  }\n}\n\nonMounted(fetchPopular)\n</script>\n"],"mappings":";;;;;uBACEA,mBAAA,CAgBM,cAfJC,YAAA,CAAoCC,MAAA;IAAxBC,QAAM,EAAED,MAAA,CAAAE;EAAY,IAChCH,YAAA,CAAkCC,MAAA;IAAzBG,QAAM,EAAEH,MAAA,CAAAI;EAAa,IAEtBJ,MAAA,CAAAK,MAAM,CAACC,MAAM,I,cADrBC,YAAA,CAKEP,MAAA;;IAHCK,MAAM,EAAEL,MAAA,CAAAK,MAAM;IACdG,YAAW,EAAER,MAAA,CAAAS,UAAU;IACvBC,aAAY,EAAEV,MAAA,CAAAW;wDAEjBb,mBAAA,CAA4C,KAAAc,UAAA,EAAlC,gCAA8B,IAGhCZ,MAAA,CAAAa,aAAa,I,cADrBN,YAAA,CAIEP,MAAA;;IAFCc,KAAK,EAAEd,MAAA,CAAAa,aAAa;IACpBE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEjB,MAAA,CAAAa,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}