{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport MovieList from '../components/MovieList.vue';\nimport MovieDetail from '../views/MovieDetail.vue';\nimport SearchBar from '../components/SearchBar.vue';\nimport Filter from '../components/Filter.vue';\nexport default {\n  __name: 'HomeView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const movies = ref([]);\n    const selectedMovie = ref(null);\n    const apiKey = process.env.VITE_TMDB_API_KEY;\n    const fetchPopular = async () => {\n      const res = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=es-ES`);\n      const data = await res.json();\n      movies.value = data.results;\n    };\n    const searchMovies = async query => {\n      if (!query) return fetchPopular();\n      const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=es-ES&query=${encodeURIComponent(query)}`);\n      const data = await res.json();\n      movies.value = data.results;\n    };\n    const filterByGenre = async genreId => {\n      const res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=es-ES&with_genres=${genreId}`);\n      const data = await res.json();\n      movies.value = data.results;\n    };\n    const openDetail = movie => {\n      selectedMovie.value = movie;\n    };\n    const addToFavorites = movie => {\n      const stored = JSON.parse(localStorage.getItem('favorites')) || [];\n      if (!stored.find(m => m.id === movie.id)) {\n        stored.push(movie);\n        localStorage.setItem('favorites', JSON.stringify(stored));\n        alert('Película agregada a favoritos!');\n      }\n    };\n    onMounted(fetchPopular);\n    const __returned__ = {\n      movies,\n      selectedMovie,\n      apiKey,\n      fetchPopular,\n      searchMovies,\n      filterByGenre,\n      openDetail,\n      addToFavorites,\n      ref,\n      onMounted,\n      MovieList,\n      MovieDetail,\n      SearchBar,\n      Filter\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","MovieList","MovieDetail","SearchBar","Filter","movies","selectedMovie","apiKey","process","env","VITE_TMDB_API_KEY","fetchPopular","res","fetch","data","json","value","results","searchMovies","query","encodeURIComponent","filterByGenre","genreId","openDetail","movie","addToFavorites","stored","JSON","parse","localStorage","getItem","find","m","id","push","setItem","stringify","alert"],"sources":["C:/Users/anade/OneDrive/Escritorio/vue-movie-app/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <SearchBar @search=\"searchMovies\" />\n    <Filter @filter=\"filterByGenre\" />\n    <MovieList \n      v-if=\"movies.length\" \n      :movies=\"movies\" \n      @show-detail=\"openDetail\" \n      @add-favorite=\"addToFavorites\" \n    />\n    <p v-else>No hay películas para mostrar.</p>\n\n    <MovieDetail \n      v-if=\"selectedMovie\" \n      :movie=\"selectedMovie\" \n      @close=\"selectedMovie = null\" \n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport MovieList from '../components/MovieList.vue'\nimport MovieDetail from '../views/MovieDetail.vue'\nimport SearchBar from '../components/SearchBar.vue'\nimport Filter from '../components/Filter.vue'\n\nconst movies = ref([])\nconst selectedMovie = ref(null)\n\nconst apiKey = process.env.VITE_TMDB_API_KEY\n\nconst fetchPopular = async () => {\n  const res = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=es-ES`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst searchMovies = async (query) => {\n  if (!query) return fetchPopular()\n  const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=es-ES&query=${encodeURIComponent(query)}`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst filterByGenre = async (genreId) => {\n  const res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=es-ES&with_genres=${genreId}`)\n  const data = await res.json()\n  movies.value = data.results\n}\n\nconst openDetail = (movie) => {\n  selectedMovie.value = movie\n}\n\nconst addToFavorites = (movie) => {\n  const stored = JSON.parse(localStorage.getItem('favorites')) || []\n  if (!stored.find(m => m.id === movie.id)) {\n    stored.push(movie)\n    localStorage.setItem('favorites', JSON.stringify(stored))\n    alert('Película agregada a favoritos!')\n  }\n}\n\nonMounted(fetchPopular)\n</script>\n"],"mappings":"AAqBA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAI;AACnC,OAAOC,SAAS,MAAM,6BAA4B;AAClD,OAAOC,WAAW,MAAM,0BAAyB;AACjD,OAAOC,SAAS,MAAM,6BAA4B;AAClD,OAAOC,MAAM,MAAM,0BAAyB;;;;;;;IAE5C,MAAMC,MAAM,GAAGN,GAAG,CAAC,EAAE;IACrB,MAAMO,aAAa,GAAGP,GAAG,CAAC,IAAI;IAE9B,MAAMQ,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAgB;IAE3C,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,sDAAsDN,MAAM,iBAAiB;MACrG,MAAMO,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC;MAC5BV,MAAM,CAACW,KAAK,GAAGF,IAAI,CAACG,OAAM;IAC5B;IAEA,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;MACpC,IAAI,CAACA,KAAK,EAAE,OAAOR,YAAY,CAAC;MAChC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,qDAAqDN,MAAM,yBAAyBa,kBAAkB,CAACD,KAAK,CAAC,EAAE;MACvI,MAAML,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC;MAC5BV,MAAM,CAACW,KAAK,GAAGF,IAAI,CAACG,OAAM;IAC5B;IAEA,MAAMI,aAAa,GAAG,MAAOC,OAAO,IAAK;MACvC,MAAMV,GAAG,GAAG,MAAMC,KAAK,CAAC,uDAAuDN,MAAM,+BAA+Be,OAAO,EAAE;MAC7H,MAAMR,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC;MAC5BV,MAAM,CAACW,KAAK,GAAGF,IAAI,CAACG,OAAM;IAC5B;IAEA,MAAMM,UAAU,GAAIC,KAAK,IAAK;MAC5BlB,aAAa,CAACU,KAAK,GAAGQ,KAAI;IAC5B;IAEA,MAAMC,cAAc,GAAID,KAAK,IAAK;MAChC,MAAME,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC;MACjE,IAAI,CAACJ,MAAM,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKT,KAAK,CAACS,EAAE,CAAC,EAAE;QACxCP,MAAM,CAACQ,IAAI,CAACV,KAAK;QACjBK,YAAY,CAACM,OAAO,CAAC,WAAW,EAAER,IAAI,CAACS,SAAS,CAACV,MAAM,CAAC;QACxDW,KAAK,CAAC,gCAAgC;MACxC;IACF;IAEArC,SAAS,CAACW,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}